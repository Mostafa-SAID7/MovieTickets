@model MovieTickets.Models.Movie
@{
    ViewData["Title"] = Model?.Title ?? "Movie details";
}

<div class="container py-4">
    <div class="row g-4">
        <div class="col-lg-7">
            <!-- Carousel -->
            <div id="movieCarousel" class="carousel slide" data-bs-ride="carousel" aria-label="Movie images">
                <div class="carousel-inner">
                    @if (Model?.MovieImgs != null && Model.MovieImgs.Any())
                    {
                        for (int i = 0; i < Model.MovieImgs.Count; i++)
                        {
                            var img = Model.MovieImgs.ElementAt(i);
                            var imgUrl = Url.Content(img?.ImgUrl ?? "~/images/placeholder-movie.png");
                            <div class="carousel-item @(i == 0 ? "active" : "")">
                                <img src="@imgUrl" class="d-block w-100 object-fit-cover" alt="Poster for @Model.Title" loading="lazy" />
                            </div>
                        }
                    }
                    else
                    {
                        <div class="carousel-item active">
                            <img src="~/images/placeholder-movie.png" class="d-block w-100 object-fit-cover" alt="No image available" loading="lazy" />
                        </div>
                    }
                </div>

                <button class="carousel-control-prev" type="button" data-bs-target="#movieCarousel" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#movieCarousel" data-bs-slide="next">
                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>

            <div class="mt-3">
                @* Trailer: we'll open modal and inject safe embed URL via JS *@
                @if (!string.IsNullOrWhiteSpace(Model?.TrailerUrl))
                {
                    <button id="openTrailerBtn" type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#trailerModal" data-trailer="@Html.Raw(Html.Encode(Model.TrailerUrl))">
                        <i class="bi bi-play-circle"></i> Watch Trailer
                    </button>
                }
            </div>
        </div>

        <div class="col-lg-5">
            <h1 class="mb-1">@Model?.Title</h1>
            <p class="text-muted small">@((Model?.Cinema?.Name) ?? "—") &nbsp;•&nbsp; @((Model?.Category?.Name) ?? "—")</p>

            <div class="mb-3">
                <h5>About</h5>
                <p>@Model?.Description</p>
                <p><strong>Price:</strong> @Model?.Price.ToString("0.##") EGP</p>
                <p>
                    <strong>Dates:</strong>
                    @Model?.StartDate.ToString("yyyy-MM-dd")
                    @if (Model?.EndDate > Model?.StartDate)
                    {
                        <span> — @Model.EndDate.ToString("yyyy-MM-dd")</span>
                    }
                </p>
            </div>

            <div class="mb-3">
                <h6>Cast</h6>
                <div>
                    @if (Model?.MovieActors != null && Model.MovieActors.Any())
                    {
                        foreach (var ma in Model.MovieActors)
                        {
                            var actorName = $"{ma?.Actor?.FirstName} {ma?.Actor?.LastName}".Trim();
                            <span class="badge bg-light text-dark border me-1 mb-1">@(!string.IsNullOrWhiteSpace(actorName) ? actorName : "Unknown")</span>
                        }
                    }
                    else
                    {
                        <small class="text-muted">Cast info not available.</small>
                    }
                </div>
            </div>

            <div>
                <button class="btn btn-lg btn-success" data-bs-toggle="modal" data-bs-target="#bookingModal">Book Now</button>
                <a class="btn btn-outline-secondary ms-2" asp-action="Index" asp-controller="Movies">Back to list</a>
            </div>
        </div>
    </div>
</div>

<!-- Trailer modal -->
@if (!string.IsNullOrWhiteSpace(Model?.TrailerUrl))
{
    <div class="modal fade" id="trailerModal" tabindex="-1" aria-labelledby="trailerLabel" aria-hidden="true">
        <div class="modal-dialog modal-xl modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="trailerLabel">@Model.Title — Trailer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body p-0">
                    <div class="ratio ratio-16x9">
                        <iframe id="trailerIframe" src="" title="Trailer" allowfullscreen sandbox="allow-same-origin allow-scripts allow-presentation"></iframe>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Booking modal -->
<div class="modal fade" id="bookingModal" tabindex="-1" aria-labelledby="bookingLabel" aria-hidden="true">
    <div class="modal-dialog modal-md modal-dialog-centered">
        <div class="modal-content">
            <form asp-action="Create" asp-controller="Bookings" method="post" class="needs-validation" novalidate>
                @Html.AntiForgeryToken()
                <div class="modal-header">
                    <h5 class="modal-title" id="bookingLabel">Book: @Model?.Title</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>

                <div class="modal-body">
                    <input type="hidden" name="MovieId" value="@Model?.Id" />

                    <div class="mb-3">
                        <label asp-for="Bookings" class="form-label">Name</label>
                        <input name="CustomerName" class="form-control" required />
                        <div class="invalid-feedback">Please provide your name.</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Email</label>
                        <input name="Email" type="email" class="form-control" required />
                        <div class="invalid-feedback">Enter a valid email.</div>
                    </div>

                    <div class="mb-3">
                        <label class="form-label">Seats</label>
                        <input name="Seats" type="number" class="form-control" min="1" value="1" required />
                        <div class="invalid-feedback">Please select seats.</div>
                    </div>
                </div>

                <div class="modal-footer">
                    <button type="submit" class="btn btn-success">Confirm Booking</button>
                    <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // bootstrap form validation
        (function () {
            'use strict';
            var forms = document.querySelectorAll('.needs-validation');
            Array.prototype.slice.call(forms).forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    if (!form.checkValidity()) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        })();

        // Safe trailer handling:
        (function () {
            const trailerModalEl = document.getElementById('trailerModal');
            const trailerIframe = document.getElementById('trailerIframe');
            const openBtn = document.getElementById('openTrailerBtn');

            function toEmbedUrl(rawUrl) {
                if (!rawUrl) return '';
                try {
                    const u = new URL(rawUrl);
                    // YouTube patterns
                    if (u.hostname.includes('youtube.com')) {
                        const v = u.searchParams.get('v');
                        if (v) return `https://www.youtube.com/embed/${v}`;
                        // fallback: /watch?v=...
                    }
                    if (u.hostname.includes('youtu.be')) {
                        const id = u.pathname.slice(1);
                        if (id) return `https://www.youtube.com/embed/${id}`;
                    }
                    // Vimeo simple support
                    if (u.hostname.includes('vimeo.com')) {
                        const id = u.pathname.split('/').filter(Boolean).pop();
                        if (id) return `https://player.vimeo.com/video/${id}`;
                    }
                    // If already embed style return as-is only if same-origin not required
                    return rawUrl;
                } catch (e) {
                    return '';
                }
            }

            if (openBtn && trailerModalEl) {
                openBtn.addEventListener('click', function (ev) {
                    const raw = openBtn.getAttribute('data-trailer');
                    const embed = toEmbedUrl(raw);
                    if (embed) {
                        trailerIframe.setAttribute('src', embed);
                    } else {
                        // fallback: show message (or set a safe page)
                        trailerIframe.setAttribute('src', '');
                    }
                });
            }

            // Clear iframe when modal closed to stop playback
            trailerModalEl?.addEventListener('hidden.bs.modal', function () {
                trailerIframe.setAttribute('src', '');
            });
        })();
    </script>
}
